#ifndef __JOINT_H__
#define __JOINT_H__

#include <vector>
#include <cstring>

#include "./bvh_defs.h"
#include "./vec.h"

using namespace std;

class Frame {
 public:
  Frame(float* data, int num_points);

  const Vec3f& operator[](int i) const { return _offsets[i/3]; }

 private:
  std::vector<Vec3f> _offsets;
};

class SceneGraph {
 public:
  SceneGraph() : _frame(0), _points(0), _parents(0) {}
  void CreateRoot(const char * name, uint32_t id);
  void CreateJoint(const char * name, uint32_t id);
  void CreateEndSite(const char * name, uint32_t id);
  void SetChild(uint32_t parent, uint32_t child);
  void SetOffset(uint32_t id, float * offset);
  void SetNumChannels(uint32_t id, uint16_t num);
  void SetChannelFlags(uint32_t id, uint16_t flags);
  void SetChannelOrder(uint32_t id, int * order);
  void SetFrameIndex(uint32_t id, uint32_t index);
  void SetFrameTime(float delta);
  void SetNumFrames(uint32_t num);
  void SetFrameSize(uint32_t size);
  void AddFrame(float * data);
  void SetCurrentFrame(uint32_t frameNumber);

  int num_points() const { return _points.size(); }

  Vec3f get_point(int point);
  Vec3f get_translation(int pid, int fid);
  Vec3f get_rotation(int pid, int fid);

  int num_children(int pid) const { return _children[pid].size(); }
  int child(int pid, int cidx) const { return _children[pid][cidx]; }
  int num_frames() const { return _frames.size(); }
  int frame_time() const { return _frame_time; }

 private:
  void ensure(uint32_t id);
  int num_channels() const { return _channels_idx[num_points()-1] +
        _num_channels[num_points()-1]; }

 private:
  std::vector<Vec3f> _points;
  std::vector<int> _parents;
  std::vector<std::vector<int> > _children;
  std::vector<int> _num_channels;
  std::vector<int> _channels_idx;
  int _frame;
  std::vector<Frame> _frames;
  float _frame_time;
};


#endif

