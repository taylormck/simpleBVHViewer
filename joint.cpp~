#include <stdint.h>
#include <iostream>

#include "./joint.h"

using namespace std;

Frame::Frame(float* data, int num_points) {
  for (int i = 0; i < num_points; ++i) {
    _offsets.push_back(Vec3f::makeVec(data+i*3));
  }
}

void SceneGraph::ensure(uint32_t id) {
  if (_points.size() <= id) {
    _points.resize(id+1);
    _parents.resize(id+1);
    _children.resize(id+1);
    _num_channels.resize(id+1);
    _num_channels[id] = 0;
  }
}

void SceneGraph::CreateRoot(const char * name, uint32_t id) {
  cout << "createRoot:name=" << name << " id=" << id << endl;
  // TODO
  ensure(id);
}

void SceneGraph::CreateJoint(const char * name, uint32_t id) {
  cout << "createJoint:name=" << name << " id=" << id << endl;
  // TODO
  ensure(id);
}

void SceneGraph::CreateEndSite(const char * name, uint32_t id) {
  cout << "createEndSite:name=" << name << " id=" << id;
  // TODO
  ensure(id);
}

void SceneGraph::SetChild(uint32_t parent, uint32_t child) {
  cout << "setChild:parent=" << parent << " child=" << child << endl;
  // TODO
  _parents[child] = parent;
  _children[parent].push_back(child);
}

void SceneGraph::SetOffset(uint32_t id, float * offset) {
  cout << "setOffset:id=" << id << " offset=(" << offset[0] << "," << offset[1]
       << "," << offset[2] << ")" << endl;

  // TODO
  Vec3f& v = _points[id];
  Vec3f& p = _points[_parents[id]];
  for (int i = 0; i < 3; ++i) {
    // v[i] = p[i] + offset[i];
    v[i] = offset[i];
  }
}

void SceneGraph::SetNumChannels(uint32_t id, uint16_t num) {
  cout << "setNumChannels:id=" << id << " num=" << num << endl;
  // TODO
  _num_channels[id] = num;
}

void SceneGraph::SetChannelFlags(uint32_t id, uint16_t flags) {
  cout << "setChannelFlags:id=" << id << " flags=" << flags << endl;
  // TODO
}

void SceneGraph::SetChannelOrder(uint32_t id, int * order) {
  cout  << "setChannelOrder:id=" << id << endl;
  // TODO
}

void SceneGraph::SetFrameIndex(uint32_t id, uint32_t index) {
  cout << "setFrameIndex:id=" << id << " index=" << index << endl;
  // TODO
}

void SceneGraph::SetFrameTime(float delta) {
  cout << "setFrameTime:delta=" << delta << endl;
  _frame_time = delta;
}

void SceneGraph::SetNumFrames(uint32_t num) {
  cout << "setNumFrames:num=" << num << endl;
  // TODO
}

void SceneGraph::SetFrameSize(uint32_t size) {
  cout << "setFrameSize:size=" << size << endl;
  // TODO
}

void SceneGraph::AddFrame(float * data) {
  cout << "addFrame" << endl;
  // TODO
  _frames.push_back(Frame(data, num_points()));

  if (_channels_idx.empty()) {
    _channels_idx.resize(num_points());
    _channels_idx[0] = 0;
    for (int i = 1; i < num_points(); ++i) {
      _channels_idx[i] = _channels_idx[i-1] + _num_channels[i-1];
    }
  }
}

void SceneGraph::SetCurrentFrame(uint32_t frameNumber) {
  cout << "setCurrentFrame:frameNumber=" << frameNumber << endl;
  _frame = frameNumber;
}

Vec3f SceneGraph::get_point(int pid) {
  return _points[pid];
}

Vec3f SceneGraph::get_translation(int pid, int fid) {
  if (_num_channels[pid] < 4) return Vec3f::makeVec();
  const Frame& frame = _frames[fid];
  return frame[_channels_idx[pid]];
}

Vec3f SceneGraph::get_rotation(int pid, int fid) {
  if (_num_channels[pid] == 0) return Vec3f::makeVec();
  int offset = 0;
  if (_num_channels[pid] == 6) offset = 3;
  const Frame& frame = _frames[fid];
  Vec3f v = frame[_channels_idx[pid]+offset];
  return Vec3f::makeVec(v[2], v[1], v[0]);
}
